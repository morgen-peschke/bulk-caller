# Configures template parsing and expansion
template-config {
    # Configures the open and close markers for substitution targets.
    #
    # This templating engine is _extremely_ primitive, however it has 3 modes:
    #   - text : allows expanding values that are scalar JSON values (so no arrays or objects)
    #       For example: "This is an {{type}}" with '{"type": "example"}', expands to "This is an example".
    #
    #   - text-list : allows expanding values that are either scalar JSON values or arrays
    #       For example: "This is an {{type}}" with '{"type": "example"}' still expands to "This is an example",
    #       but "{{subject}} {{tense}} an {{type}}" with
    #       '{"type": "example", "subject": ["This", "That"], "tense": ["is", "was"]}' expands to
    #       ["This is an example", "That is an example", "This was an example", "That was an example"]
    #
    #   - json : allows expanding values that are arbitrary JSON, however the result must be valid JSON
    #       '{"a": {{a}}, "b": {{b}}}' with '{"a": "test", "b": {"c": true}}', expands to
    #       '{"a": "test", "b": {"c": true}}'
    substitution-markers {
        open: '{{'
        close: '}}'
    }

    # Enables using placeholder values as a fallback for substitution targets
    # that cannot be resolved.
    allow-empty: false

    # When expanding numbers, do not use exponents for very large numbers.
    do-not-use-exponents: true

    # Defines the values used when a substitution target lookup fails,
    # and allow-empty is 'true'
    placeholders {
        text: ""
        json: "null"
    }
}

# Configure generation of the request
request-config {
    # Sets the HTTP method, this is not a template.
    method: 'POST'

    # The text template used to generate the URL.
    #
    url-template: ""

    # Query parameters to be added to the URL.
    #
    # Each key will be evaluated as a text template.
    # Each value will be evaluated as a text-list template, and can result in multiple instances of the same
    # query parameter.
    query-params: {}

    # Headers to be added to the request.
    #
    # Each key will be evaluated as a text template.
    # Each value will be evaluated as a text template.
    #
    # These values will override anything set by the body config.
    headers: {}

    # Configures the request body generation.
    #
    # Only one of 'json', 'text', or 'omitted' may be set, and none should be set when 'method' is "GET"
    body {
        # The json template used to generate the body
        #
        # This sets the Content-Type header to 'application/json', and sets Content-Length to an appropriate value.
        # json: ""

        # The text template used to generate the body
        #
        # This sets the Content-Type header to 'text/plain; charset=UTF-8', and sets Content-Length to an
        # appropriate value.
        # text: ""

        # This flag results in an empty body.
        #
        # Config doesn't like it when directly extracted values are null, so the
        # only value accepted for this key is "true"
        #
        # Neither the Content-Type, nor Content-Length headers will be set.
        omitted: true
    }
}

# Configure response success criteria
#
# To be considered a successful call, both status and body must pass their respective checks.
success-criteria {
   # Sets the status codes that will be considered successful.
   #
   # To make this less tedious, this is taken as a string which will be parsed to extract the appropriate codes.
   # Legal values are:
   #   - 'n/a' : Consider any status a success
   #   - 'success' : Consider any status with a 2xx code a success
   #   - 'XXX,...,ZZZ' : Success statuses can be explicitly provided as a CSV of their numeric codes
   codes: 'success'

   # Sets the success criteria for evaluating the response body.
   #
   # Both 'success' and 'failure' have the same format, and must have exactly one of 'json' or 'regex' specified.
   body {
        # Set the success criteria, if this passes, the failure case will not be checked.
        #
        # Exactly one of 'json.path' or 'regex' must be specified
        success {
            # This can only be used to extract a value from a JSON response.
            #
            # The value must be a string containing a path, which supports the following syntax:
            # IDENTIFIER_FIELD := '.' (LETTER | '_') (LETTER | DIGIT | '_')*
            # FIELD_NAME := '"' ANY_CHAR '"'
            # ARRAY_INDEX := [1-9] DIGIT*
            # EXPLICIT_FIELD := '[' (FIELD_NAME | ARRAY_INDEX) ']'
            # PATH := (IDENTIFIER_FIELD | EXPLICIT_FIELD)+
            #
            # Examples:
            #   Given the JSON '{"a": {"b": {"c": true}}}, "d": [0,1,2,3, {"e": false}]}'
            #
            #   '.a.b.c' and '["a"]["b"]["c"]'  and '.a["b"].c' all extract 'true'
            #   '.d[0]' extracts '0'
            #   '.d[4].e' extracts 'false'
            #
            json.path: "" ;

            # This can be used to evaluate success for either JSON or text responses.
            #
            # JSON responses will be serialized to a single line before passing to the regex.
            #
            # If groups are present in the regex, the first group will be used, otherwise the full match
            # will be used.
            # regex: ""

            # If the extracted value passes this check, it will be considered a success.
            # This comparison can use any of these keys:
            #     'not', 'exists', 'forall',
            #     '<', '<=', '>=', '>',
            #     'at', 'any',
            #     'starts-with', 'ends-with', 'contains'
            #
            # See peschke.bulk_calls.models.When for more details.
            when.not.equal: null
        }

        # Set the failure criteria
        failure {
            json.path: ".code"
            when.not.equal: null
        }
   }
}

# Configure retry behavior
retry {
  # Retry a call despite existing success
  #
  # This seems like it wouldn't come up often, and is mostly included for completeness.
  success: false

  # Retry a call that wasn't able to be attempted previously
  #
  # This usually means the data is incorrect, so fix the data before enabling.
  not-attempted: false

  # Retry a call that was attempted, and deemed a failure
  failed-attempts: false
}

# Configure where the reports will be saved.
#
# If the paths aren't absolute, they will be resolved based on the current working directory.
reporting.paths {
    cleaning: "cleaned"
    results: "report"
}

# Declare any fallbacks here as a JSON object.
# Each key will be a substitution target, and the value will be converted from HOCON to JSON
constants {}